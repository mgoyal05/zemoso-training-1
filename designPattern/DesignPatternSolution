
Design Pattern assignment answers :


1. java.net.URLStreamHandlerFactory#createURLStreamHandler(String) :	Factory Pattern
	-> Here, createURLStreamHandler method creates a new URLStreamHandler instance by taking in a string parameter which specifies the protocol to be used. Hence for different protocols(ftp/http/nntp/etc), it creates different URLStreamHandler objects. Hence, it's creational design pattern and specifically Factory Pattern.


2. java.util.Calendar#getInstance() :	Factory Pattern
	-> In Calendar class, getInstance method without any parameters gets the timezone and locale of the system and returns a calendar object accordingly. Depending on the locale it will either return a Buddhist Calendar, Japanese Imperial Calendar or a GregorianCalander. This dynamic creation of Calendar object at run-time makes this a Factory Design Pattern.

3. java.rmi.* :		Proxy Pattern
	-> RMI (Remote Method Invocation) package provides a mechanism that enables an object on one JVM to invoke methods on an object in another JVM. Since this package relies wholly on creating and dealing with a proxy object, proxy class represents functionality of original class. Hence, Proxy design pattern is the obvious choice here.
